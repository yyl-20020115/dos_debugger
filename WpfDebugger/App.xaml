<Application x:Class="WpfDebugger.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        
        <!-- Navigation icons -->
        <BitmapImage x:Key="BackwardImage" UriSource="Resources/NavigateBackwards_6270.png"/>
        <BitmapImage x:Key="ForwardImage" UriSource="Resources/NavigateForward_6271.png"/>

        <!-- Object icons -->
        <BitmapImage x:Key="ErrorImage" UriSource="Resources/Error_red_21x20.png"/>
        <BitmapImage x:Key="WarningImage" UriSource="Resources/Warning_yellow_7231_21x20.png"/>
        <BitmapImage x:Key="MessageImage" UriSource="Resources/Information_blue_6227_21x20.png"/>
        <BitmapImage x:Key="FieldImage" UriSource="Resources/Field_Blue.png"/>
        <BitmapImage x:Key="LocalFieldImage" UriSource="Resources/Field-Private_545.png"/>
        <BitmapImage x:Key="ConstantImage" UriSource="Resources/Constant_495.png"/>
        <BitmapImage x:Key="ProcedureImage" UriSource="Resources/Method_636.png"/>
        <BitmapImage x:Key="LocalProcedureImage" UriSource="Resources/Method-Private_640.png"/>
        <BitmapImage x:Key="ProcedureAliasImage" UriSource="Resources/Method-Shortcut_641.png"/>
        <BitmapImage x:Key="ModuleImage" UriSource="Resources/Module_648.png"/>
        <BitmapImage x:Key="LibraryImage" UriSource="Resources/Library_6213.png"/>
        <BitmapImage x:Key="SegmentImage" UriSource="Resources/Namespace_654.png"/>
        <BitmapImage x:Key="PrivateSegmentImage" UriSource="Resources/Namespace-Private_658.png"/>

        <!-- Action icons -->
        <BitmapImage x:Key="OpenFileImage" UriSource="Resources/Open_6529.png"/>

        <!-- Tool window icons -->
        <BitmapImage x:Key="DisassemblyImage" UriSource="Resources/DisassemblyWindow_6536.png"/>
        <BitmapImage x:Key="ErrorListImage" UriSource="Resources/BuildErrorList_7237.png"/>
        <BitmapImage x:Key="ProcedureListImage" UriSource="Resources/ShowMethodPane_10446.png"/>
        <BitmapImage x:Key="PropertyImage" UriSource="Resources/Property_501.png"/>

        <!-- Control Behavior -->
        <Style x:Key="GrayOnDisable" TargetType="Image">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="StandardIcon" TargetType="Image">
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Control Appearance -->
        <Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
            <Setter Property="Foreground" Value="Black"/>
        </Style>

        <!-- 
        Do take a look at this:
        http://stackoverflow.com/questions/5182135/how-to-propagate-styles-to-hyperlinks-inside-a-datatemplate
        
        It points out that "elements that are not derived from Control (like
        TextBlock and Hyperlink) do not look for implicit styles outside the
        DataTemplate boundary".
        
        This means that hyperlinks inside DataTemplates (such as those defined
        in a ListView) will not automatically apply the styles we define here
        unless we explicitly give them a key.
        -->
        <Style x:Key="HoverHyperlinkStyle" TargetType="{x:Type Hyperlink}">
            <Setter Property="Foreground" Value="Blue"/>
            <Setter Property="TextBlock.TextDecorations" Value="{x:Null}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <!--<Setter Property="Foreground" Value="SteelBlue"/>-->
                    <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Make ListView header left-aligned -->
        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="Padding" Value="6,0,6,0"/>
        </Style>

        <!-- Make ListViewItems stretch so that text can be right-aligned -->
        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        </Style>
        
        <!-- Make menu separators narrower -->
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
               TargetType="{x:Type Separator}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Grid SnapsToDevicePixels="true" Margin="0,3,0,1">
                            <Rectangle Height="1"
                               Margin="30,0,1,1"
                               Fill="#E0E0E0"/>
                            <Rectangle Height="1"
                               Margin="30,1,1,0"
                               Fill="White"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
